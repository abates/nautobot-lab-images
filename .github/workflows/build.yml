---
name: Build Lab Images
run-name: Build/Publish ${{ inputs.image }} by @${{ github.actor }}
on:
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      image:
        type: choice
        description: Image to build
        options:
          - ansible-awx
          - ansible-awx-ee
          - awx
          - containerlab
          - git_server
jobs:
  images:
    name: "Select Build Images"
    runs-on: ubuntu-latest
    outputs:
      images: ${{ env.build_images }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: "Determine image directories changed in the last commit"
        shell: bash
        run: |
          git diff --name-only HEAD~1 | while read p ; do
            echo $p | awk -F/ '{print $1}' ;
          done | { grep -v github || true; } | sort | uniq > /tmp/changed_images
          echo "build_images<<EOF" >> $GITHUB_ENV
          cat /tmp/changed_images | jq -R | jq -s -M -c >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: github.event.inputs.image == ''

      - name: "Determine images to build from input"
        shell: bash
        run: |
          echo "build_images<<EOF" >> $GITHUB_ENV
          echo "${{ inputs.image }}" | jq -R | jq --slurp -M -c >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        if: github.event.inputs.image != ''

      - shell: bash
        run: "echo Will build the following images: $build_images"

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: images
    if: ${{ needs.images.outputs.images != '[]' }}
    strategy:
      fail-fast: true
      matrix:
        image: ${{fromJson(needs.images.outputs.images)}}

    steps:
      - uses: actions/checkout@v3

      - name: Read configuration
        shell: bash
        run: |
          echo "build_env<<EOF" >> $GITHUB_ENV
          echo "$(cat ${{ matrix.image }}/build_env.json)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set Main Variables
        shell: bash
        run: |
          echo "IMAGE=${{ matrix.image }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ fromJson(env.build_env).image_name }}" >> $GITHUB_ENV
          echo "BUILD_CONTEXT=${{ fromJson(env.build_env).build_context }}" >> $GITHUB_ENV
          echo "BUILD_ARGS=${{ fromJson(env.build_env).build_args }}" >> $GITHUB_ENV
          echo "VERSION=${{ fromJson(env.build_env).version }}" >> $GITHUB_ENV

      - name: Setup docker cache
        uses: jpribyl/action-docker-layer-caching@v0.1.1
        with:
          key: docker-build-${{ matrix.image }}-${{ env.VERSION }}-{hash}
          restore-keys: |
            docker-build-${{ matrix.image }}-${{ env.VERSION }}-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.VERSION }}
            latest

      - name: Set Docker Variables
        shell: bash
        run: |
          echo "TAGS<<EOF" >> $GITHUB_ENV
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "LABELS<<EOF" >> $GITHUB_ENV
          echo "${{ steps.meta.outputs.labels}}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: "Setup Pre-Build Actions"
        shell: bash
        run: |
          if [ -f ./${{ matrix.image }}/action.yml ] ; then
            cp ./${{ matrix.image }}/action.yml ./.github/actions/pre_build/action.yml
          else
            cp ./.github/actions/noop/action.yml ./.github/actions/pre_build/action.yml
          fi

      - name: Pre-Build actions
        uses: ./.github/actions/pre_build
        with:
          image: ${{ matrix.image }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for published image
        shell: bash
        run: |
          if docker manifest inspect ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}  > /dev/null 2>&1 ; then 
            echo "IMAGE_EXISTS=0" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS=1" >> $GITHUB_ENV
          fi

      - name: Build and publish image
        uses: docker/build-push-action@v3
        if: ${{ env.IMAGE_EXISTS == 0 }}
        with:
          push: true
          context: ./${{ env.BUILD_CONTEXT || matrix.image }}
          cache-from: "type=gha,scope=docker-buildx-${{ matrix.image }}-${{ env.VERSION }}"
          cache-to: "type=gha,scope=docker-buildx-${{ matrix.image }}-${{ env.VERSION }}"
          tags: ${{ env.TAGS }}
          labels: ${{ env.LABELS }}
          platforms: linux/arm64,linux/amd64
          build-args: |
            VERSION=${{ env.VERSION }}
            ${{ env.BUILD_ARGS }}
