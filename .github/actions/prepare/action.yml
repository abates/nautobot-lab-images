name: Prepare
description: prep the environment for building
inputs:
  image:
    description: 'Base Directory of image to build'
    required: true
    type: string
  github_token:
    description: 'Github token for logging into container registry'
    required: true
    type: string

outputs:
  tags:
    description: "Container tags for pushing to registry"
    value: ${{ steps.meta.outputs.tags }}
  labels:
    description: "Container labels for pushing to registry"
    value: ${{ steps.meta.outputs.labels }}
  build_env:
    description: "Content of the build_env.json file"
    value: ${{ env.build_env }}
  image_name:
    description: "Image name for the newly build image"
    value: ${{ env.IMAGE_NAME }}
  build_context:
    description: "Build context for the docker build"
    value: ${{ env.BUILD_CONTEXT }}
  build_args:
    description: "Additional build args"
    value: ${{ env.BUILD_ARGS }}
  version:
    description: "Version of the image being built"
    value: ${{ env.VERSION }}

runs:
  using: "composite"

  # Steps represent a sequence of tasks that will be executed as part of the job
  steps:
    - name: Read configuration
      shell: bash
      run: echo "build_env=$(cat ${{ inputs.image }}/build_env.json)" >> $GITHUB_ENV

    - name: Set Image
      shell: bash
      run: echo "IMAGE=${{ inputs.image }}" >> $GITHUB_ENV

    - name: Set Image Name
      shell: bash
      run: echo IMAGE_NAME=${{ fromJson(env.build_env).image_name }} >> $GITHUB_ENV

    - name: Set Build Context
      shell: bash
      run: echo BUILD_CONTEXT=${{ fromJson(env.build_env).build_context }} >> $GITHUB_ENV

    - name: Set Build Args
      shell: bash
      run: echo BUILD_ARGS=${{ fromJson(env.build_env).build_args }} >> $GITHUB_ENV

    - name: Set Version
      shell: bash
      run: echo VERSION=${{ fromJson(env.build_env).version }} >> $GITHUB_ENV

    - name: Setup docker cache
      uses: actions/cache@v3
      with:
        path: /var/lib/docker
        key: ${{ inputs.image }}-${{ steps.load_variables.outputs.data.version }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}
        tags: |
          ${{ env.VERSION }}
          latest

    - id: action_file
      uses: andstor/file-existence-action@v2
      with:
        files: ./${{ inputs.image }}/action.yml

    - name: "Copy image action"
      shell: bash
      run: cp ./${{ inputs.image }}/action.yml ./.github/actions/pre_build/action.yml
      if: steps.action_file.outputs.files_exists == 'true'

    - name: "Copy noop action"
      shell: bash
      run: cp ./.github/actions/noop/action.yml ./.github/actions/pre_build/action.yml
      if: steps.action_file.outputs.files_exists == 'false'

